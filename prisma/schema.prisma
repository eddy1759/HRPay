generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// --- Enums ---

enum UserRole {
  SUPER_ADMIN // System-wide admin
  ADMIN       // Company-level admin
  EMPLOYEE    // Standard employee user
}

enum PayrollStatus {
  DRAFT     // Generated, pending approval
  APPROVED  // Approved, ready for payment
  PAID      // Payment completed
  ERROR    // Error during processing (e.g., payment failure)
  CANCELLED // Cancelled by admin (before payment)
}


// Invitation lifecycle tracking
enum InviteStatus {
  PENDING
  ACCEPTED
  EXPIRED
  CANCELLED
}

enum EmploymentType {
  FULL_TIME
  CONTRACTOR
}

enum PayType {
  SALARY
  HOURLY
}


enum LeaveType {
  ANNUAL
  SICK
  UNPAID
}

enum LeaveRequestStatus {
  PENDING
  APPROVED
  REJECTED
  CANCELLED // By employee or admin before approval
}

// --- Core Models ---

model Company {
  id           String       @id @default(uuid()) @db.Uuid
  name         String       @db.VarChar(255)
  email        String       @unique @db.VarChar(255) // Company contact email

  // Relationships
  users       User[]       // Users linked to this company
  employees   Employee[]   // Employees belonging to this company
  payrolls    Payroll[]    // Payrolls run by this company
  invitations Invitation[] // Invitations sent by this company

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([email])
  @@map("companies")
}

/// Represents a user account that can log in to the system.
model User {
  id         String   @id @default(uuid()) @db.Uuid
  email      String   @unique @db.VarChar(255) // Login email
  password   String   @db.VarChar(255) // Stored HASH - ensure application hashes it!
  isVerified Boolean  @default(false) // Email verification status
  role       UserRole @default(EMPLOYEE)

  // Relationships
  company   Company? @relation(fields: [companyId], references: [id], onDelete: SetNull)
  companyId String?  @db.Uuid

  // One-to-one link: User might be an Admin without an Employee record.
  employee Employee? @relation("UserEmployee") // Named relation for 1-to-1

  // Invitations
  acceptedInvitation Invitation? @relation("AcceptedByUser") // Link to the invitation they accepted
  invitationsSent    Invitation[] @relation("InvitedByUser") // Invitations sent *by* this user (e.g., Admin)

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  auditLogs AuditLog[]


  @@index([email])
  @@index([companyId])
  @@map("users")
}

/// Represents an employee record, containing employment and basic payroll details.
model Employee {
  id            String         @id @default(uuid()) @db.Uuid
  firstName     String         @db.VarChar(100)
  lastName      String         @db.VarChar(100)
  email         String         @unique @db.VarChar(255) // Employee's contact email (can differ from User.email)
  employmentType EmploymentType @default(FULL_TIME)

  isActive      Boolean        @default(true) // For filtering active employees for payroll
  payType   PayType  @default(SALARY)   // SALARY or HOURLY
  salary    Decimal? @db.Decimal(12, 2) // Annual salary (if PayType=SALARY)
  payRate   Decimal? @db.Decimal(10, 2) // Hourly rate (if PayType=HOURLY)

  // Relationships
  company   Company @relation(fields: [companyId], references: [id], onDelete: Restrict) // Employee must belong to a company
  companyId String  @db.Uuid

  user   User?   @relation("UserEmployee", fields: [userId], references: [id], onDelete: SetNull) // Link to login account
  userId String? @unique @db.Uuid // Foreign key for the 1-to-1 relation

  payrolls      EmployeePayroll[] // Payroll history for this employee


  // NEW: Leave Management Relationships
  leaveBalances LeaveBalance[]
  leaveRequests LeaveRequest[] @relation("LeaveRequestedByEmployee")

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([email, companyId]) // Ensure email is unique per company
  @@index([email])
  @@index([companyId, isActive]) // Important for fetching active employees for payroll
  @@map("employees")
}

/// Represents an invitation to join a company.
model Invitation {
  id        String       @id @default(uuid()) @db.Uuid
  email     String       @db.VarChar(255) // Email invited
  token     String       @unique @db.VarChar(255) // Secure, unique token for the invite link
  role      UserRole     @default(EMPLOYEE) // Role assigned upon acceptance
  status    InviteStatus @default(PENDING)
  expiresAt DateTime     // Invitations should expire

  // Relationships
  company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId String  @db.Uuid

  invitedById String? @db.Uuid
  invitedByUser User? @relation("InvitedByUser", fields: [invitedById], references: [id], onDelete: SetNull)

  acceptedByUserId String? @unique @db.Uuid
  acceptedByUser   User?   @relation("AcceptedByUser", fields: [acceptedByUserId], references: [id], onDelete: SetNull)

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([email, companyId, status]) // Allow re-inviting if previous was CANCELLED/EXPIRED
  @@index([token])
  @@index([companyId])
  @@index([status])
  @@map("invitations")
}

/// Represents a payroll run for a company covering a specific period.
model Payroll {
  id          String        @id @default(uuid()) @db.Uuid
  periodStart DateTime      // Start date of the pay period
  periodEnd   DateTime      // End date of the pay period
  paymentDate DateTime?     // Target date for payment disbursement
  status      PayrollStatus @default(DRAFT) // Tracks the state of the payroll run

  // Aggregated Totals (Calculated during generation/processing)
  totalGross      Decimal? @db.Decimal(14, 2)
  totalNet        Decimal? @db.Decimal(14, 2)
  employeeCount    Int?     // Number of employees processed in this payroll run


  // Relationships
  company   Company @relation(fields: [companyId], references: [id], onDelete: Restrict) // Payroll MUST belong to a company
  companyId String  @db.Uuid

  details EmployeePayroll[] // Line items for each employee in this run

  // Timestamps
  createdAt DateTime @default(now()) // When the record was created (initial draft start)
  updatedAt DateTime @updatedAt

  auditLogs AuditLog[] // Audit logs related to this payroll run

  @@index([status])
  @@index([companyId, periodStart, periodEnd])
  @@index([paymentDate])
  
  @@map("payrolls")
}

/// Junction Table: Details for a specific employee within a specific payroll run (Forms the Payslip data).
model EmployeePayroll {
  id String @id @default(uuid()) @db.Uuid

  // Core Pay Calculation
  grossAmount   Decimal  @db.Decimal(12, 2) // Total earnings before any deductions
  netAmount     Decimal  @db.Decimal(12, 2) // Take-home pay (Gross - Deductions - Taxes)

  // Earnings Breakdown (Examples)
  regularHoursWorked Decimal? @db.Decimal(6, 2)
  
  // Leave Taken during this period (Connects to Leave system)
  leaveHoursUsed Decimal? @db.Decimal(6, 2)
  leaveType      LeaveType? // Which type of leave was primary if used


  // Relationships
  employee   Employee @relation(fields: [employeeId], references: [id], onDelete: Restrict) // Link to the employee
  employeeId String   @db.Uuid

  payroll   Payroll @relation(fields: [payrollId], references: [id], onDelete: Cascade) // Link to the parent payroll run
  payrollId String  @db.Uuid

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([employeeId, payrollId]) // Employee appears once per payroll
  @@index([employeeId])
  @@index([payrollId])
  @@map("employee_payrolls") // This table essentially represents the data for a single payslip
}


/// Stores the available leave balance for an employee for a specific leave type.
model LeaveBalance {
  id String @id @default(uuid()) @db.Uuid

  employee   Employee  @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  employeeId String    @db.Uuid
  leaveType  LeaveType // Type of leave (ANNUAL, SICK, etc.)
  balance    Decimal   @db.Decimal(6, 2) // Current available balance (e.g., in hours or days)
  unit       String    @default("days") // Could be 'hours' or 'days'

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([employeeId, leaveType]) // One balance record per employee per leave type
  @@index([employeeId])
  @@map("leave_balances")
}

/// Represents a request made by an employee to take leave.
model LeaveRequest {
  id String @id @default(uuid()) @db.Uuid

  employee   Employee           @relation("LeaveRequestedByEmployee", fields: [employeeId], references: [id], onDelete: Cascade)
  employeeId String             @db.Uuid
  leaveType  LeaveType          // Type of leave requested
  startDate  DateTime           // Start date of leave
  endDate    DateTime           // End date of leave (inclusive)
  duration   Decimal            @db.Decimal(6, 2) // Requested duration (calculated, in balance units)
  reason     String?            @db.Text          // Reason provided by employee
  status     LeaveRequestStatus @default(PENDING)  // Current status of the request


  adminNotes    String?   @db.Text // Notes from the approver/rejecter

  // Timestamps
  createdAt DateTime @default(now()) // When the request was submitted
  updatedAt DateTime @updatedAt

  @@index([employeeId])
  @@index([status])
  @@index([startDate, endDate])
  @@map("leave_requests")
}


// --- Auditing ---

enum AuditActionType {
  PAYROLL_GENERATED
  PAYROLL_QUEUE_FAILURE
  PAYROLL_APPROVED
  PAYROLL_PAID
  PAYROLL_REJECTED // Example: If approval is denied
  PAYROLL_CANCELLED // Example: If a draft is cancelled
  // Add other relevant actions as needed
}

model AuditLog {
  id         String          @id @default(uuid()) @db.Uuid
  actionType AuditActionType // What action was performed
  timestamp  DateTime        @default(now())

  // Relationships
  userId    String? @db.Uuid // Who performed the action
  user      User?   @relation(fields: [userId], references: [id], onDelete: SetNull)

  payrollId String? @db.Uuid // Which payroll was affected (optional, might be other entities)
  payroll   Payroll? @relation(fields: [payrollId], references: [id], onDelete: Cascade) // Cascade delete if payroll is deleted

  details Json? // Store additional context/metadata about the event

  @@index([actionType])
  @@index([userId])
  @@index([payrollId])
  @@index([timestamp])
  @@map("audit_logs")
}
