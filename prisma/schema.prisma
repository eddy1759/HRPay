generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// --- Enums ---
enum SystemUserRole {
  SUPER_ADMIN
  BASIC_USER
}

enum EmployeeUserRole {
  ADMIN
  EMPLOYEE
}

enum PayrollStatus {
  DRAFT
  APPROVED
  PAID
  ERROR
  CANCELLED
}

enum InviteStatus {
  PENDING
  ACCEPTED
  EXPIRED
  CANCELLED
}

enum EmploymentType {
  FULL_TIME
  CONTRACTOR
}

enum PayType {
  SALARY
  HOURLY
}

enum LeaveType {
  ANNUAL
  SICK
  UNPAID
}

enum LeaveRequestStatus {
  PENDING
  APPROVED
  REJECTED
  CANCELLED
}

enum AuditActionType {
  PAYROLL_GENERATED
  PAYROLL_QUEUE_FAILURE
  PAYROLL_APPROVED
  PAYROLL_PAID
  PAYROLL_REJECTED
  PAYROLL_CANCELLED
}

// --- Core Models with Multi‑Tenancy & Soft‑Delete Flags ---
model Company {
  id          String     @id @default(uuid()) @db.Uuid
  name        String     @unique @db.VarChar(255)
  email       String     @unique @db.VarChar(255)
  isDeleted   Boolean    @default(false)

  employees   Employee[]
  payrolls    Payroll[]
  invitations Invitation[]

  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@index([email])
  @@unique([name, email])
  @@map("companies")
}

model User {
  id               String            @id @default(uuid()) @db.Uuid
  email            String            @unique @db.VarChar(255)
  password         String            @db.VarChar(255)
  isVerified       Boolean           @default(false)
  systemRole       SystemUserRole    @default(BASIC_USER)

  employees        Employee[]        @relation("UserEmployees")
  acceptedInvitation Invitation?     @relation("AcceptedByUser")
  invitationsSent  Invitation[]      @relation("InvitedByUser")
  auditLogs        AuditLog[]

  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt

  @@index([email])
  @@map("users")
}

model Employee {
  id             String              @id @default(uuid()) @db.Uuid
  firstName      String              @db.VarChar(100)
  lastName       String              @db.VarChar(100)
  email          String              @db.VarChar(255)
  employmentType EmploymentType      @default(FULL_TIME)
  isActive       Boolean             @default(true)
  isDeleted      Boolean             @default(false)
  payType        PayType             @default(SALARY)
  salary         Decimal?            @db.Decimal(12, 2)
  payRate        Decimal?            @db.Decimal(10, 2)
  role           EmployeeUserRole    @default(EMPLOYEE)

  userId         String              @db.Uuid
  user           User                @relation("UserEmployees", fields: [userId], references: [id])

  companyId      String              @db.Uuid
  company        Company             @relation(fields: [companyId], references: [id])

  payrolls       EmployeePayroll[]
  leaveBalances  LeaveBalance[]
  leaveRequests  LeaveRequest[]      @relation("LeaveRequestedByEmployee")

  createdAt      DateTime            @default(now())
  updatedAt      DateTime            @updatedAt

  @@unique([userId, companyId])
  @@index([email])
  @@index([companyId])
  @@index([isActive])
  @@map("employees")
}

model Invitation {
  id                 String         @id @default(uuid()) @db.Uuid
  email              String         @db.VarChar(255)
  token              String         @unique @db.VarChar(255)
  role               EmployeeUserRole @default(EMPLOYEE)
  status             InviteStatus  @default(PENDING)
  expiresAt          DateTime

  companyId          String         @db.Uuid
  company            Company        @relation(fields: [companyId], references: [id], onDelete: Cascade)

  invitedById        String?        @db.Uuid
  invitedByUser      User?          @relation("InvitedByUser", fields: [invitedById], references: [id], onDelete: SetNull)

  acceptedByUserId   String?        @unique @db.Uuid
  acceptedByUser     User?          @relation("AcceptedByUser", fields: [acceptedByUserId], references: [id], onDelete: SetNull)

  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt

  @@unique([email, companyId, status])
  @@unique([token, status])
  @@index([acceptedByUserId])
  @@index([companyId])
  @@index([status])
  @@map("invitations")
}

model Payroll {
  id             String        @id @default(uuid()) @db.Uuid
  periodStart    DateTime
  periodEnd      DateTime
  paymentDate    DateTime?
  status         PayrollStatus @default(DRAFT)
  isDeleted      Boolean       @default(false)

  totalGross     Decimal?      @db.Decimal(14, 2)
  totalNet       Decimal?      @db.Decimal(14, 2)
  employeeCount  Int?

  companyId      String        @db.Uuid
  company        Company       @relation(fields: [companyId], references: [id], onDelete: Restrict)

  details        EmployeePayroll[]
  auditLogs      AuditLog[]

  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  @@index([status])
  @@index([companyId, periodStart, periodEnd])
  @@index([paymentDate])
  @@map("payrolls")
}

model EmployeePayroll {
  id                 String      @id @default(uuid()) @db.Uuid
  grossAmount        Decimal     @db.Decimal(12, 2)
  netAmount          Decimal     @db.Decimal(12, 2)
  regularHoursWorked Decimal?    @db.Decimal(6, 2)
  leaveHoursUsed     Decimal?    @db.Decimal(6, 2)
  leaveType          LeaveType?

  employeeId         String      @db.Uuid
  employee           Employee    @relation(fields: [employeeId], references: [id], onDelete: Restrict)

  payrollId          String      @db.Uuid
  payroll            Payroll     @relation(fields: [payrollId], references: [id], onDelete: Cascade)

  createdAt          DateTime    @default(now())
  updatedAt          DateTime    @updatedAt

  @@unique([employeeId, payrollId])
  @@index([employeeId])
  @@index([payrollId])
  @@map("employee_payrolls")
}

model LeaveBalance {
  id          String     @id @default(uuid()) @db.Uuid
  employeeId  String     @db.Uuid
  employee    Employee   @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  leaveType   LeaveType
  balance     Decimal    @db.Decimal(6, 2)
  unit        String     @default("days")

  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@unique([employeeId, leaveType])
  @@index([employeeId])
  @@map("leave_balances")
}

model LeaveRequest {
  id          String            @id @default(uuid()) @db.Uuid
  employeeId  String            @db.Uuid
  employee    Employee          @relation("LeaveRequestedByEmployee", fields: [employeeId], references: [id], onDelete: Cascade)
  leaveType   LeaveType
  startDate   DateTime
  endDate     DateTime
  duration    Decimal           @db.Decimal(6, 2)
  reason      String?           @db.Text
  status      LeaveRequestStatus @default(PENDING)
  adminNotes  String?           @db.Text

  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt

  @@index([employeeId])
  @@index([status])
  @@index([startDate, endDate])
  @@map("leave_requests")
}

model AuditLog {
  id         String          @id @default(uuid()) @db.Uuid
  actionType AuditActionType
  timestamp  DateTime        @default(now())
  userId     String?         @db.Uuid
  user       User?           @relation(fields: [userId], references: [id], onDelete: SetNull)
  payrollId  String?         @db.Uuid
  payroll    Payroll?        @relation(fields: [payrollId], references: [id], onDelete: Cascade)
  details    Json?

  @@index([actionType])
  @@index([userId])
  @@index([payrollId])
  @@index([timestamp])
  @@map("audit_logs")
}
