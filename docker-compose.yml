services:
    api:
        build:
            context: .
            dockerfile: Dockerfile
        ports:
            - '3000:3000'
        volumes:
            - .:/app
            - /app/node_modules
        environment:
            - NODE_ENV=development
            - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/insightfi?schema=public
            - REDIS_URL=redis://redis:6379
            - RABBITMQ_URL=amqp://rabbitmq:5672
        depends_on:
            postgres:
                condition: service_healthy
            redis:
                condition: service_healthy
            rabbitmq:
                condition: service_healthy
        restart: unless-stopped
        healthcheck:
            test: ['CMD', 'curl', '-f', 'http://localhost:3000/health']
            interval: 30s
            timeout: 10s
            retries: 3
            start_period: 40s

    postgres:
        image: postgres:17-alpine
        ports:
            - '5432:5432'
        environment:
            - POSTGRES_USER=postgres
            - POSTGRES_PASSWORD=postgres
            - POSTGRES_DB=insightfi
        volumes:
            - postgres_data:/var/lib/postgresql/data
        restart: unless-stopped
        healthcheck:
            test: ['CMD-SHELL', 'pg_isready -U postgres']
            interval: 10s
            timeout: 5s
            retries: 5

    redis:
        image: redis:alpine
        ports:
            - '6379:6379'
        volumes:
            - redis_data:/data
        restart: unless-stopped
        healthcheck:
            test: ['CMD', 'redis-cli', 'ping']
            interval: 10s
            timeout: 5s
            retries: 5

    rabbitmq:
        image: rabbitmq:3-management-alpine
        ports:
            - '5672:5672' # AMQP protocol port
            - '15672:15672' # Management UI port
        volumes:
            - rabbitmq_data:/var/lib/rabbitmq
        environment:
            - RABBITMQ_DEFAULT_USER=guest
            - RABBITMQ_DEFAULT_PASS=guest
        restart: unless-stopped
        healthcheck:
            test: ['CMD', 'rabbitmq-diagnostics', '-q', 'ping']
            interval: 30s
            timeout: 10s
            retries: 3

volumes:
    postgres_data:
    redis_data:
    rabbitmq_data:
